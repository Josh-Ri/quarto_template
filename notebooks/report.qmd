---
title: "Title"
subtitle: "Subtitle"
author: "Author"
date: today
date-format: "MMMM D, YYYY"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    code-fold: true
    code-tools: true
    df-print: paged
    fig-width: 15
    fig-height: 6
    fig-dpi: 300
    embed-resources: true
    html-math-method: katex
  pdf:
    documentclass: article
    geometry: margin=1in
    toc: true
    number-sections: true
    colorlinks: true
jupyter: python3
execute:
  echo: false
  warning: false
  message: false
  cache: false
---

## Welcome to Quarto!

This template demonstrates how to create data analysis reports using **Quarto** with Python. Quarto combines the best of R Markdown and Jupyter notebooks, allowing you to create beautiful, reproducible documents.

### Key Features

- **Multiple output formats**: HTML, PDF, Word, presentations
- **Interactive elements**: Plots, tables, and widgets
- **Code execution**: Python, R, Julia, and more
- **Reproducible research**: Version-controlled analysis


```{python}
#| label: setup
#| echo: true
#| include: false

# Import basic libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from itables import show

# Optional: Import custom helper functions
try:
    from src.helper_functions import *
    print("✅ Helper functions loaded")
except ImportError:
    print("ℹ️  Helper functions not found - that's okay!")

# Set random seed for reproducibility
np.random.seed(42)

print("🚀 Setup complete!")
```

## Creating Sample Data

Create some sample data.

```{python}
#| label: create-data
#| echo: true



# Create sample dataset
n_points = 1000
dates = pd.date_range(start='2023-01-01', periods=n_points, freq='D')

data = {
    'date': dates,
    'category': np.random.choice(['A', 'B', 'C', 'D'], n_points, p=[0.4, 0.3, 0.2, 0.1]),
    'value': np.random.exponential(scale=100, size=n_points),
    'metric': np.random.normal(loc=50, scale=15, size=n_points),
    'binary': np.random.choice([0, 1], n_points, p=[0.7, 0.3])
}

df = pd.DataFrame(data)

# Display basic info
print(f"Dataset shape: {df.shape}")
print(f"Date range: {df['date'].min()} to {df['date'].max()}")
df.head()
```

## Data Summary

### Basic Statistics

Create some summary statistics.

```{python}
#| label: summary-stats
#| echo: true

# Summary statistics
summary = df.describe()
summary
```

### Missing Values Check

Check for missing values.

```{python}
#| label: missing-values
#| echo: true

# Check for missing values
missing_info = df.isnull().sum()
print("Missing values per column:")
for col, count in missing_info.items():
    print(f"  {col}: {count}")

if missing_info.sum() == 0:
    print("✅ No missing values found!")
```

## Visualisations

### Static Plot with Matplotlib

Create a static plot.

```{python}
#| label: matplotlib-plot
#| echo: true
#| fig-cap: "Distribution of Values using Matplotlib"

plt.figure(figsize=(10, 6))
plt.hist(df['value'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
plt.title('Distribution of Values')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.grid(True, alpha=0.3)
plt.show()
```

### Interactive Plot with Plotly

Create an interactive plot.

```{python}
#| label: plotly-plot
#| echo: true
#| fig-cap: "Interactive scatter plot showing relationship between variables"

fig = px.scatter(
    df, 
    x='value', 
    y='metric', 
    color='category',
    size='binary',
    hover_data=['date'],
    title='Interactive Scatter Plot',
    labels={'value': 'Value', 'metric': 'Metric Score'}
)

fig.update_layout(
    width=800,
    height=500
)

fig.show()
```

### Time Series Plot

Create a time series plot.

```{python}
#| label: time-series
#| echo: true
#| fig-cap: "Time series showing trends over time"

# Aggregate data by month
monthly_data = df.groupby(df['date'].dt.to_period('M')).agg({
    'value': 'mean',
    'metric': 'mean'
}).reset_index()

monthly_data['date'] = monthly_data['date'].dt.to_timestamp()

fig = px.line(
    monthly_data, 
    x='date', 
    y='value',
    title='Monthly Average Values',
    labels={'value': 'Average Value', 'date': 'Date'}
)

fig.update_layout(width=800, height=400)
fig.show()
```


## Tables and Data Display


### Simple Table

Create a simple table.

```{python}
#| label: simple-table
#| echo: true

# Category summary table
category_summary = df.groupby('category').agg({
    'value': ['count', 'mean', 'std'],
    'metric': ['mean', 'std']
}).round(2)

# Flatten column names
category_summary.columns = ['_'.join(col).strip() for col in category_summary.columns]
category_summary
```

### Formatted Table with Styling

Use Itables to display a table.

```{python}
#| label: styled-table
#| echo: true

# Create a nicely formatted summary
summary_stats = {
    'Metric': ['Total Records', 'Date Range', 'Categories', 'Avg Value', 'Avg Metric'],
    'Value': [
        f"{len(df):,}",
        f"{df['date'].min().strftime('%Y-%m-%d')} to {df['date'].max().strftime('%Y-%m-%d')}",
        f"{df['category'].nunique()} unique",
        f"{df['value'].mean():.2f}",
        f"{df['metric'].mean():.2f}"
    ]
}

summary_df = pd.DataFrame(summary_stats)
show(summary_df)
```

## Mathematical Expressions

Quarto supports LaTeX math expressions):

- Inline math: $\mu = \frac{1}{n}\sum_{i=1}^{n} x_i$
- Block math:

$$
\sigma^2 = \frac{1}{n-1}\sum_{i=1}^{n}(x_i - \mu)^2
$$


## Conditional Content

You can include conditional content based on data:

```{python}
#| label: conditional-check
#| echo: false

high_values = len(df[df['value'] > 200])
has_high_values = high_values > 0
```

```{python}
#| label: conditional-display
#| echo: true
#| eval: !expr has_high_values

if has_high_values:
    print(f"⚠️  Found {high_values} records with high values (>200)")
    high_value_data = df[df['value'] > 200]
    print(f"Average high value: {high_value_data['value'].mean():.2f}")
else:
    print("ℹ️  No unusually high values detected")
```

## Key Insights

Create some key insights generated dynamically.

```{python}
#| label: insights
#| echo: false

insights = []

# Category analysis
top_category = df['category'].value_counts().index[0]
top_category_pct = (df['category'].value_counts().iloc[0] / len(df)) * 100

insights.append(f"📊 **Most common category**: {top_category} ({top_category_pct:.1f}% of records)")

# Value analysis
avg_value = df['value'].mean()
if avg_value > 100:
    insights.append(f"📈 **High average value**: {avg_value:.2f}")
else:
    insights.append(f"📉 **Moderate average value**: {avg_value:.2f}")

# Time span
time_span = (df['date'].max() - df['date'].min()).days
insights.append(f"📅 **Data covers**: {time_span} days")

print("## Summary Insights\n")
for insight in insights:
    print(f"- {insight}")
```



## Rendering Options

You can render this document in multiple formats:

```bash
# HTML (default)
quarto render notebooks/report.qmd

# PDF  
quarto render notebooks/report.qmd --to pdf

# Word document
quarto render notebooks/report.qmd --to docx

# All formats
quarto render notebooks/report.qmd --to all
```

---

Happy analysing! 🎉

